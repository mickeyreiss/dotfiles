call plug#begin('~/.vim/plugged')

Plug 'goddenrich/vim-plz'
Plug 'Shougo/vimshell'
Plug 'sebdah/vim-delve'
Plug 'bazelbuild/vim-ft-bzl'
Plug 'scrooloose/syntastic', { 'for': ['sh'] }
Plug 'avakhov/vim-yaml'
Plug 'Galooshi/vim-import-js'
Plug 'JuliaEditorSupport/julia-vim'
Plug 'Quramy/tsuquyomi'
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'Shougo/neocomplete.vim'
Plug 'airblade/vim-gitgutter'
Plug 'andviro/flake8-vim'
Plug 'benmills/vimux'
Plug 'chankaward/vim-railscasts-theme'
Plug 'codeindulgence/vim-tig'
Plug 'dart-lang/dart-vim-plugin'
Plug 'fatih/vim-go', { 'do': ':GoInstallBinaries' }
Plug 'flowtype/vim-flow'
Plug 'grassdog/tagman.vim'
Plug 'hail2u/vim-css3-syntax'
Plug 'hashivim/vim-terraform'
Plug 'https://github.com/google/protobuf', { 'rtp': 'editors/proto.vim' }
Plug 'itchyny/vim-pdf'
Plug 'jlanzarotta/bufexplorer'
Plug 'jparise/vim-graphql'
Plug 'jtratner/vim-flavored-markdown'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/rainbow_parentheses.vim'
Plug 'junegunn/gv.vim', { 'on': 'GV' }
Plug 'junegunn/fzf.vim'
Plug 'junegunn/goyo.vim', { 'for': 'markdown' }
Plug 'keith/swift.vim'
Plug 'klen/python-mode', { 'for': ['python'] }
Plug 'leafgarland/typescript-vim'
Plug 'majutsushi/tagbar'
Plug 'mdempsky/gocode', { 'rtp': 'vim', 'do': '~/.vim/plugged/gocode/vim/symlink.sh' }
Plug 'mxw/vim-jsx'
Plug 'nathangrigg/vim-beancount'
Plug 'natebosch/vim-lsc'
Plug 'nsf/gocode', { 'tag': 'v.20150303', 'rtp': 'vim' }
Plug 'pangloss/vim-javascript'
Plug 'prettier/vim-prettier', { 'do': 'yarn install', 'for': ['javascript', 'typescript', 'css', 'less', 'scss', 'json', 'graphql', 'markdown', 'vue', 'yaml', 'html'] }
Plug 'rhysd/vim-crystal'
Plug 'scrooloose/nerdtree', { 'on':  ['NERDTreeToggle', 'NERDTreeFind'] }
Plug 'styled-components/vim-styled-components'
Plug 'tmhedberg/matchit'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-haml', { 'for': ['scss', 'css', 'sass', 'haml'] }
Plug 'tpope/vim-rails'
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-sleuth'
Plug 'tpope/vim-speeddating'
Plug 'tpope/vim-surround'
Plug 'uber/prototool', { 'rtp': 'vim' }
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'vim-scripts/nginx.vim'
Plug 'wannesm/wmgraphviz.vim'
Plug 'mxw/vim-prolog'

call plug#end()

set autoindent
set expandtab
set hlsearch
set ignorecase
set incsearch
set number
set shiftwidth=2
set smartcase
set tabstop=2
set backspace=indent,eol,start
set hidden

match Tabline / \+$/

syntax on
filetype plugin indent on

colorscheme railscasts
set colorcolumn=100

nmap <Space> <C-d>

" Spelling
au FileType text,markdown,ghmarkdown,gitcommit set spell
hi clear SpellBad
hi SpellBad cterm=underline ctermfg=red

" NERDTree

nmap <Leader>nt :NERDTreeToggle<CR>
nmap <Leader>nf :NERDTreeFind<CR>
let NERDTreeIgnore = ['\~$']

" Fuzzy find
let $FZF_DEFAULT_COMMAND = 'git ls-files --cached --others --exclude-standard | uniq'
nmap <Leader>ff :FZF<CR>
nmap <Leader>fb :Buffers<CR>

function! s:buflist()
  redir => ls
  silent ls
  redir END
  return split(ls, '\n')
endfunction

function! s:bufopen(e)
  execute 'buffer' matchstr(a:e, '^[ 0-9]*')
endfunction

" neocomplete

let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#sources#syntax#min_keyword_length = 3

nnoremap <silent> <Leader>fb :call fzf#run({
\   'source':  reverse(<sid>buflist()),
\   'sink':    function('<sid>bufopen'),
\   'options': '+m',
\   'down':    len(<sid>buflist()) + 2
\ })<CR>

" rainbow
" Activation based on file type
augroup rainbow
  autocmd!
  autocmd FileType javascript,typescript,javascript.jsx,typescript.jsx RainbowParentheses
  autocmd FileType go RainbowParentheses
augroup END

augroup firemodel
  autocmd!
  autocmd FileType firemodel :set filetypet=proto<CR>
augroup END


" Tagbar

nmap <Leader>tt :TagbarToggle<CR>
" au FileType go :TagbarOpen

" Snippets

let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" Go-Vim

au FileType go nmap <leader>gr :w<CR><Plug>(go-run)
au FileType go nmap <leader>gb :w<CR><Plug>(go-build)
au FileType go nmap <leader>gt :w<CR><Plug>(go-test)
au FileType go nmap <leader>gc :w<CR><Plug>(go-coverage)

au FileType go nmap <C-]> <Plug>(go-def)
au FileType go nmap <C-w><C-]> <Plug>(go-def-split)

au FileType go nmap <Leader>gd <Plug>(go-doc)

au FileType go nmap <Leader>gs <Plug>(go-implements)
au FileType go nmap <Leader>ge <Plug>(go-rename)

au FileType go nmap <Leader>i <Plug>(go-info)

let g:go_list_type = "quickfix"

let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
let g:go_fmt_command = "goimports"

let g:syntastic_go_checkers = ['golint', 'govet', 'errcheck']
let g:syntastic_javascript_checkers=['eslint']
let g:syntastic_javascript_eslint_exe='$(yarn global bin)/eslint'
let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['go', 'javascript', 'python'] }

" vim-prettier
let g:prettier#config#bracket_spacing = 'true'
let g:prettier#autoformat = 0
let g:prettier#autoformat_require_pragma = 0
let g:prettier#autoformat_config_present = 1
let g:prettier#quickfix_enabled = 1


" Goyo

nmap <Leader><Space> :Goyo<CR>

" vim-commentary

map <Leader>cc :Commentary<CR>
" autocmd FileType javascript.jsx setlocal commentstring={/*\ %s\ */}

" Vimux

nmap <Leader>vp :VimuxPromptCommand<CR>
nmap <Leader>rl :wa<CR>:VimuxRunLastCommand<CR>

" Vim Flavored Markdown
augroup markdown
    au!
    au BufNewFile,BufRead *.md,*.markdown setlocal filetype=ghmarkdown
augroup END

" Vim Airline

set laststatus=2 statusline=%02n:%<%f\ %h%m%r%=%-14.(%l,%c%V%)\ %P
let g:airline_theme="base16_grayscale"
let g:airline_section_a=airline#section#create(['crypt', 'paste', 'spell', 'iminsert'])

" JSX
let g:jsx_ext_required = 0 " .js files as jsx

" vim-import-js
augroup javascript,typescript
  au!
  " au BufWritePre *.js,*.jsx :ImportJSFix
  nmap <C-]> :silent ImportJSGoto<CR>
augroup END

" Python
" let g:pymode_python = 'python3'
let g:pymode_folding = 0
let g:pymode_rope = 0
let g:pymode_rope_goto_definition_bind = "<C-]>"
let g:pymode_rope_lookup_project = 0

" Autofmt
" augroup autoformat_settings
  " autocmd FileType bzl AutoFormatBuffer buildifier
  " autocmd FileType c,cpp AutoFormatBuffer clang-format
  " autocmd FileType dart AutoFormatBuffer dartfmt
  " autocmd FileType go AutoFormatBuffer gofmt
  " autocmd FileType gn AutoFormatBuffer gn
  " autocmd FileType html,css,json AutoFormatBuffer js-beautify
  " autocmd FileType java AutoFormatBuffer google-java-format
  " autocmd FileType python AutoFormatBuffer yapf
  " Alternative: autocmd FileType python AutoFormatBuffer autopep8
" augroup END

" Beancount
au FileType beancount inoremap . .<C-\><C-O>:AlignCommodity<CR>


" General
nmap ZS :w<cr>
nmap ZW :w<cr>
abbr W w
nmap <Leader>nh :nohlsearch<CR>
nmap <Leader><C-r> :source ~/.vimrc<CR> <bar> :PlugInstall<CR>
" make Y consistent with C and D.
nnoremap Y y$

" Protect changes between writes. Default values of
" updatecount (200 keystrokes) and updatetime
" (4 seconds) are fine
set swapfile
set directory^=~/.vim/swap//

" protect against crash-during-write
set writebackup
" but do not persist backup after successful write
set nobackup
" use rename-and-write-new method whenever safe
set backupcopy=auto
" patch required to honor double slash at end
if has("patch-8.1.0251")
    " consolidate the writebackups -- not a big
    " deal either way, since they usually get deleted
    set backupdir^=~/.vim/backup//
end

" persist the undo tree for each file
set undodir=~/.vim/undo//
set backupdir=~/.vim/backup//
set directory=~/.vim/swap//

"-------- Local Overrides
""If you have options you'd like to override locally for
"some reason (don't want to store something in a
""publicly-accessible repository, machine-specific settings, etc.),
"you can create a '.local_vimrc' file in your home directory
""(ie: ~/.vimrc_local) and it will be 'sourced' here and override
"any settings in this file.
if filereadable(expand('~/.vimrc_local'))
  source ~/.vimrc_local
end

" vim-flow
let g:flow#autoclose=1
let g:flow#flowpath='./node_modules/.bin/flow'

" LangServer
"
let g:LanguageClient_serverCommands = {
      \ 'typescript': ['/usr/local/bin/javascript-typescript-stdio'],
      \ 'typescript.jsx': ['/usr/local/bin/javascript-typescript-stdio'],
      \ 'javascript': ['/usr/local/bin/javascript-typescript-stdio'],
      \ 'javascript.jsx': ['/usr/local/bin/javascript-typescript-stdio'],
      \ 'python': ['pyls'],
      \ 'go': ['go-langserver'],
      \ }


map <Leader><Enter> :call LanguageClient_contextMenu()<CR>
" Or map each action separately
nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
nnoremap <silent> <F2> :call LanguageClient#textDocument_rename()<CR>

" Yaml
au! BufNewFile,BufReadPost *.{yaml,yml} set filetype=yaml
autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab
