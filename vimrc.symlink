call plug#begin('~/.vim/plugged')

Plug 'Galooshi/vim-import-js'
Plug 'benmills/vimux'
Plug 'chankaward/vim-railscasts-theme'
Plug 'fatih/vim-go'
Plug 'google/vim-ft-bzl'
Plug 'grassdog/tagman.vim'
Plug 'hashivim/vim-terraform'
Plug 'https://github.com/google/protobuf', { 'rtp': 'editors/proto.vim' }
Plug 'jlanzarotta/bufexplorer'
Plug 'jtratner/vim-flavored-markdown'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/goyo.vim'
Plug 'keith/swift.vim'
Plug 'majutsushi/tagbar'
Plug 'mxw/vim-jsx'
Plug 'nsf/gocode', { 'tag': 'v.20150303', 'rtp': 'vim' }
Plug 'pangloss/vim-javascript'
Plug 'scrooloose/nerdtree', { 'on':  ['NERDTreeToggle', 'NERDTreeFind'] }
Plug 'scrooloose/syntastic'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-surround'
Plug 'vim-airline/vim-airline-themes'
Plug 'wannesm/wmgraphviz.vim'

call plug#end()

set autoindent
set expandtab
set hlsearch
set ignorecase
set incsearch
set number
set shiftwidth=2
set smartcase
au FileType text,markdown,ghmarkdown set spell
set tabstop=2
set backspace=indent,eol,start

match Tabline / \+$/

syntax on
filetype plugin indent on


colorscheme railscasts

" NERDTree

nmap <Leader>nt :NERDTreeToggle<CR>
nmap <Leader>nf :NERDTreeFind<CR>

" Fuzzy find
nmap <Leader>ff :FZF<CR>

function! s:buflist()
  redir => ls
  silent ls
  redir END
  return split(ls, '\n')
endfunction

function! s:bufopen(e)
  execute 'buffer' matchstr(a:e, '^[ 0-9]*')
endfunction

nnoremap <silent> <Leader>fb :call fzf#run({
\   'source':  reverse(<sid>buflist()),
\   'sink':    function('<sid>bufopen'),
\   'options': '+m',
\   'down':    len(<sid>buflist()) + 2
\ })<CR>

" Tagbar

nmap <Leader>tt :TagbarToggle<CR>
" au FileType go :TagbarOpen

" Go-Vim

au FileType go nmap <leader>gr :w<CR><Plug>(go-run)
au FileType go nmap <leader>gb :w<CR><Plug>(go-build)
au FileType go nmap <leader>gt :w<CR><Plug>(go-test)
au FileType go nmap <leader>gc :w<CR><Plug>(go-coverage)

au FileType go nmap <C-]> <Plug>(go-def)
au FileType go nmap <C-w><C-]> <Plug>(go-def-split)

au FileType go nmap <Leader>gdd <Plug>(go-doc)
au FileType go nmap <Leader>gdb <Plug>(go-doc-browser)

au FileType go nmap <Leader>gs <Plug>(go-implements)
au FileType go nmap <Leader>ge <Plug>(go-rename)

let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
let g:go_fmt_command = "goimports"

let g:syntastic_go_checkers = ['golint', 'govet', 'errcheck']
let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['go'] }

" Goyo

nmap <Leader><Space> :Goyo<CR>

" vim-commentary

map <Leader>cc :Commentary<CR>

" Vimux

nmap <Leader>vp :VimuxPromptCommand<CR>
nmap <Leader>rl :wa<CR>:VimuxRunLastCommand<CR>

" Vim Flavored Markdown
augroup markdown
    au!
    au BufNewFile,BufRead *.md,*.markdown setlocal filetype=ghmarkdown
augroup END

" Vim Airline

set laststatus=2
let g:airline_theme="raven"

" JSX
let g:jsx_ext_required = 0 " .js files as jsx

" General

nmap ZS :w<cr>
nmap ZW :w<cr>
abbr W w
nmap <Leader>nh :nohlsearch<CR>
nmap <Leader><C-r> :source ~/.vimrc<CR> <bar> :PlugInstall<CR>

"-------- Local Overrides
""If you have options you'd like to override locally for
"some reason (don't want to store something in a
""publicly-accessible repository, machine-specific settings, etc.),
"you can create a '.local_vimrc' file in your home directory
""(ie: ~/.vimrc_local) and it will be 'sourced' here and override
"any settings in this file.
if filereadable(expand('~/.vimrc_local'))
  source ~/.vimrc_local
end
